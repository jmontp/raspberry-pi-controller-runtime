profile:
  name: mock_pi_default
  controller: pi_mock
  actuator: mock_actuator
  sensors:
    - name: imu
      binding: mock_imu
      required: true
    - name: vertical_grf
      binding: mock_grf
      required: false

#
# Operator-facing Signals table (non-breaking addition)
# ---------------------------------------------------
# This section enumerates all controller-relevant signals and how they resolve
# to hardware or derived values. The runtime currently consumes the legacy
# 'schemas' section below; this table is provided for operators and future
# loaders. Unknown keys are ignored by the current loader, so tests continue to
# pass while we migrate tooling.
#
signals:
  # Inputs (resolved from hardware or derived)
  knee_angle:
    role: input
    source: hardware
    sensor: imu
    channel: knee_angle
    required: true
  knee_velocity:
    role: input
    source: hardware
    sensor: imu
    channel: knee_velocity
    required: true
  ankle_angle:
    role: input
    source: hardware
    sensor: imu
    channel: ankle_angle
    required: true
  ankle_velocity:
    role: input
    source: hardware
    sensor: imu
    channel: ankle_velocity
    required: true
  grf_total:
    role: input
    source: hardware
    sensor: vertical_grf
    channel: grf_total
    required: false
    default: 0.0

  # Outputs (consumed by the actuator)
  knee_torque:
    role: output
    target: actuator
    joint: knee
  ankle_torque:
    role: output
    target: actuator
    joint: ankle

# Fixed IO order used by buffer alignment (matches schemas below)
io:
  inputs:
    order: [knee_angle, knee_velocity, ankle_angle, ankle_velocity, grf_total]
  outputs:
    order: [knee_torque, ankle_torque]

schemas:
  pi_inputs:
    description: "Two-joint controller inputs aligned with training feature order."
    channels:
      - knee_angle
      - knee_velocity
      - ankle_angle
      - ankle_velocity
      - { signal: grf_total, required: false, default: 0.0 }
  pi_outputs:
    description: "Torque outputs expected by the mock actuator."
    channels:
      - knee_torque
      - ankle_torque

controllers:
  pi_mock:
    implementation: rpc_runtime.controllers.pi_controller.PIController
    input_schema: pi_inputs
    output_schema: pi_outputs
    joints: ["knee", "ankle"]
    description: "Mock PI controller bundle for development and testing."
    config:
      dt: 0.01
      torque_scale: 0.1
      torque_limit_nm: 10.0
      gains:
        kp:
          knee: 0.0
          ankle: 0.0
        ki:
          knee: 0.0
          ankle: 0.0
    torque_model:
      implementation: rpc_runtime.controllers.torque_models.mock.MockTorqueModel
      config:
        outputs:
          knee: 0.0
          ankle: 0.0

sensors:
  mock_imu:
    driver: rpc_runtime.sensors.imu.mock.MockIMU
    provides:
      - knee_angle
      - knee_velocity
      - ankle_angle
      - ankle_velocity
    config:
      loop: true
    required: true
  mock_grf:
    driver: rpc_runtime.sensors.grf.mock.MockVerticalGRF
    provides:
      - grf_total
    config: {}
    required: false

actuators:
  mock_actuator:
    driver: rpc_runtime.actuators.mock.MockActuator
    config: {}
